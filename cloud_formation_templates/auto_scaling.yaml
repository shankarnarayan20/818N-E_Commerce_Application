AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling and Load Balancer for E-commerce Platform

Parameters:
  VPCId:
    Type: String
    Description: The VPC ID where the resources will be deployed.

  PublicSubnetId1:
    Type: String
    Description: The public subnet ID for EC2 instances.
  
  PublicSubnetId2:
    Type: String
    Description: The public subnet ID for EC2 instances.

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: String
    Default: "aws_shank_kp"

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  RDSfromEC2SecurityGroupId:
    Description: RDS to EC2 Security Group
    Type: String

  EC2toRDSSecurityGroupId:
    Description: EC2 to RDS Security Group
    Type: String

  EC2SecurityGroupId:
    Description: EC2 Security Group
    Type: String

  AnsibleSecurityGroupId:
    Description: Ansible Security Group
    Type: String
  
  AMIId:
    Description: Base Ubuntu Image for Instances in EC2 instances
    Type: String
    Default: "ami-0866a3c8686eaeeba"

  EC2InstanceProfileArn:
    Description: Instance profile ARN
    Type: String
  
  AnsibleInstanceProfile:
    Description: SSM role Instance profile ARN for Ansible Instance 
    Type: String


Resources:

  AnsibleSGEgressRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AnsibleSecurityGroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref EC2SecurityGroupId

  AnsibleSGEgressRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AnsibleSecurityGroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  AnsibleSGIngressRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AnsibleSecurityGroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  

  AnsibleInstance:
   Type: AWS::EC2::Instance
   Properties:
    InstanceType: "t2.micro"
    KeyName: !Ref KeyName
    ImageId: "ami-0010af63f7fe53464"
    SecurityGroupIds:
      - !Ref AnsibleSecurityGroupId
    IamInstanceProfile: !Ref AnsibleInstanceProfile
    SubnetId: !Ref PublicSubnetId1
    BlockDeviceMappings:
    - DeviceName: "/dev/xvda"  # Root volume device name
      Ebs:
        VolumeSize: 8           # Size of the root volume in GB
        Encrypted: true         # Enable encryption for the root volume
    Tags:
      - Key: Name
        Value: Bastion-host

  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPS
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS access from anywhere
      

  EC2SGIngressRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  EC2SGIngressRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AnsibleSecurityGroupId
  
      

  # Adding Rules to EC2 to RDS Security Group for EC2 Instances
  EC2SGEgressRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2toRDSSecurityGroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref RDSfromEC2SecurityGroupId 

  # Launch Configuration with IAM Role and Security Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MidTermTemplate
      LaunchTemplateData:
        ImageId: !Ref AMIId  # Choose an appropriate AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecurityGroupId
          - !Ref EC2toRDSSecurityGroupId
        IamInstanceProfile: 
          Arn: !Ref EC2InstanceProfileArn  # Use the ARN of the existing instance profile
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"  # Root volume device name
          Ebs:
            VolumeSize: 8           # Size of the root volume in GB
            Encrypted: true

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      HealthCheckProtocol: HTTPS
      HealthCheckPort: 443
      HealthCheckPath: /
      

  # Load Balancer to distribute traffic
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      

  # Listener to route traffic to the Target Group
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:156041403412:certificate/ffc414a1-e796-44e1-b425-22ae9da4a3a0
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      

  # Auto Scaling Group to manage EC2 instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 0
      TargetGroupARNs:
        - !Ref TargetGroup


  # Event bridge to setup new ec2 instances launched by the ASG
  # InstanceLaunchEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Name: InstanceLaunchEventRule
  #     Description: Triggers Lambda function when an EC2 instance launches in a specific Auto Scaling group.
  #     EventPattern:
  #       source:
  #         - aws.autoscaling
  #       detail-type:
  #         - EC2 Instance Launch Successful
  #       detail:
  #         AutoScalingGroupName:
  #           - !Ref AutoScalingGroup
  #     Targets:
  #       - Arn: arn:aws:lambda:us-east-1:156041403412:function:Ansible_Instance_Launch
  #         Id: Ansible_Instance_Launch

  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: Ansible_Instance_Launch
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt InstanceLaunchEventRule.Arn


  # CloudWatch Log Group for EC2 Instances
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/ecommerce-application
      RetentionInDays: 7  # Optional: Retain logs for 14 days
      

  # CloudWatch Alarm for High CPU Usage
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage exceeds 80%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
      

  # CloudWatch Alarm for Low CPU Usage
  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage drops below 20%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy
      

  # Step Scaling Policy to Scale Up
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      Cooldown: 60
      

  # Step Scaling Policy to Scale Down
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      Cooldown: 60
      

Outputs:
  AutoScalingGroupId:
    Description: The ID of the Auto Scaling group
    Value: !Ref AutoScalingGroup

  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
