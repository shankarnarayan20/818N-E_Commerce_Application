AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling and Load Balancer for E-commerce Platform

Parameters:
  VPCId:
    Type: String
    Description: The VPC ID where the resources will be deployed.
    Default: vpc-0f688e20beeea151e

  PublicSubnetId1:
    Type: String
    Description: The public subnet ID for EC2 instances.
    Default: subnet-0cc8916a0c9660e27 
  
  PublicSubnetId2:
    Type: String
    Description: The public subnet ID for EC2 instances.
    Default: subnet-0defe66feecf2c170


  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  # S3BucketName:
  #   Description: The name of the S3 bucket to be accessed by EC2 instances
  #   Type: String

Resources:
  # IAM Role for EC2 instances
  # EC2InstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #           Action: sts:AssumeRole

  # IAM Policy for S3, RDS, and Secrets Manager access
  # EC2InstancePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: EC2InstancePolicy
  #     Roles:
  #       - !Ref EC2InstanceRole
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         # Allow read/write access to the specified S3 bucket
  #         - Effect: Allow
  #           Action:
  #             - s3:ListBucket
  #             - s3:GetObject
  #             - s3:PutObject
  #           Resource:
  #             - !Sub arn:aws:s3:::${S3BucketName}  # Bucket itself
  #             - !Sub arn:aws:s3:::${S3BucketName}/*  # Bucket contents

          # Allow access to Secrets Manager
          # - Effect: Allow
          #   Action:
          #     - secretsmanager:GetSecretValue
          #   Resource: "*"  # Replace with your secret's ARN if needed
          
          # # Allow RDS access (e.g., for monitoring)
          # - Effect: Allow
          #   Action:
          #     - rds:DescribeDBInstances
          #     - rds:Connect
          #   Resource: "*"

  # # Instance Profile to attach IAM Role to EC2
  # InstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref EC2InstanceRole

  # Security Group for EC2 Instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH access (restrict to specific IPs in production)

  # Launch Configuration with IAM Role and Security Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0b27ebcf010a33f1c  # Choose an appropriate AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile:
          Arn: arn:aws:iam::156041403412:instance-profile/Midterm-ec2-role  # Use the ARN of the existing instance profile

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  # Load Balancer to distribute traffic
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      SecurityGroups:
        - !Ref EC2SecurityGroup

  # Listener to route traffic to the Target Group
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Auto Scaling Group to manage EC2 instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref TargetGroup

  # Auto Scaling Policy to scale out based on CPU usage
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50  # Scale up when CPU exceeds 50%

Outputs:
  AutoScalingGroupId:
    Description: The ID of the Auto Scaling group
    Value: !Ref AutoScalingGroup

  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
