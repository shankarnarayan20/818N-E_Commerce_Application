AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling and Load Balancer for E-commerce Platform

Parameters:
  VPCId:
    Type: String
    Description: The VPC ID where the resources will be deployed.
    Default: vpc-0f688e20beeea151e

  PublicSubnetId1:
    Type: String
    Description: The public subnet ID for EC2 instances.
    Default: subnet-0cc8916a0c9660e27 
  
  PublicSubnetId2:
    Type: String
    Description: The public subnet ID for EC2 instances.
    Default: subnet-0defe66feecf2c170


  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  
  RDSSecurityGroup:
    Description: RDS Security Group
    Type: AWS::EC2::SecurityGroup
    Default: sg-0284bbe2dff6726bd

  # S3BucketName:
  #   Description: The name of the S3 bucket to be accessed by EC2 instances
  #   Type: String

Resources:


  # Security Group for EC2 Instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH access (restrict to specific IPs in production)

  EC2RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Egress MySQL access
      VpcId: !Ref VPCId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref RDSSecurityGroup  # Allow HTTP access from anywhere


  # Launch Configuration with IAM Role and Security Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-066e50926fb9d17a7  # Choose an appropriate AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
          - !Ref EC2RDSSecurityGroup
        IamInstanceProfile:
          Arn: arn:aws:iam::156041403412:instance-profile/Midterm-ec2-role  # Use the ARN of the existing instance profile
        UserData:
          Fn::Base64: |
            #!/bin/bash
            cd /var/www/html
            sudo rm -fr ./*
            cd ~
            git clone https://github.com/shankarnarayan20/818N-E_Commerce_Application.git midterm
            sudo mv midterm/* /var/www/html
            rm -fr midterm
            cd /var/www/html
            export COMPOSER_ALLOW_SUPERUSER=1
            sudo composer install --no-interaction 

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      HealthCheckProtocol: HTTPS
      HealthCheckPort: 443
      HealthCheckPath: /

  # Load Balancer to distribute traffic
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      SecurityGroups:
        - !Ref EC2SecurityGroup

  # Listener to route traffic to the Target Group
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:156041403412:certificate/ffc414a1-e796-44e1-b425-22ae9da4a3a0
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Auto Scaling Group to manage EC2 instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetId1
        - !Ref PublicSubnetId2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref TargetGroup

  # CloudWatch Log Group for EC2 Instances
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/ecommerce-application
      RetentionInDays: 7  # Optional: Retain logs for 14 days

  # CloudWatch Alarm for High CPU Usage
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage exceeds 80%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  # CloudWatch Alarm for Low CPU Usage
  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage drops below 20%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  # Step Scaling Policy to Scale Up
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      Cooldown: 300

  # Step Scaling Policy to Scale Down
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      Cooldown: 300

Outputs:
  AutoScalingGroupId:
    Description: The ID of the Auto Scaling group
    Value: !Ref AutoScalingGroup

  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
